Python usable definiton of MPRIS2
====================================

Python-MPRIS2 is a high-level wrapper library for the [MPRIS2](http://www.mpris.org/2.1/spec/) protocol.

The aim of this fork is to add Python 3 support, clean up the API and make the docs a bit more consistent. API compatibility will be broken.

Dependencies
============

Python-MPRIS2 requires the official DBus Python bindings (you probably have those if you have DBus) and [pydbusdecorator](https://github.com/hugosenari/pydbusdecorator).

Usage
=====

Configure dbus and mainloop
---------------------------

    # Set up DBus and the main loop
    import gobject
    from dbus.mainloop.glib import DBusGMainLoop
    DBusGMainLoop(set_as_default=True)    
    main_loop = gobject.MainLoop()


Discover running players
------------------------

    # you can use get_players_uri to get current running players uri
    from mpris2.utils import get_players_uri
    print get_players_uri()
    if not get_players_uri(): raise Exception('No MPRIS2 players available, please start some player with mpris2.')
    uri = get_players_uri()[0] 
    # get_players_uri can be called with filter parameter
    # get_players_uri('.+rhythmbox')

    # you can set it yourself
    # uri = 'org.mpris.MediaPlayer2.gmusicbrowser'
    
    # you can use one predefined
    # from mpris2.some_players import Some_Players
    # uri = Interfaces.MEDIA_PLAYER + '.' + Some_Players.GMUSICBROWSER


Connect to a player instance
----------------------------

    player = mpris2.Player(dbus_interface_info={'dbus_uri': uri})


Call methods
------------


    mp2.Next() # play next media


Get attributes
--------------

    print mp2.Metadata #current media data


Wait for signals
----------------


    import gobject
    def my_handler(self, Position):
         print 'handled', Position, type(Position)
         print 'self handled', self.last_fn_return, type(self.last_fn_return)

    def another_handler(self, \*args, \*\*kw):
         print args, kw

    mp2.Seeked = my_handler

    mp2.PropertiesChanged = another_handler

    mloop.run()